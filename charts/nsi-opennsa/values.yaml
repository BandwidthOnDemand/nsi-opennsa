---
# Default values for nsi-opennsa.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/bandwidthondemand/nsi-opennsa
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

startupProbe:
  enabled: false
  scheme: "HTTP"
  path: "/NSI/discovery.xml"
  failureThreshold: 30
  periodSeconds: 10
  timeoutSeconds: 5

livenessProbe:
  enabled: false
  scheme: "HTTP"
  path: "/NSI/discovery.xml"
  failureThreshold: 5
  periodSeconds: 6
  timeoutSeconds: 5

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.  If not set and create is true, a
  # name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  name: "nsi-opennsa"
  port: 80
  containerPort: 9080
  # configure either ClusterIP or LoadBalancer + ipAddress
  type: ClusterIP
  #  type: LoadBalancer
  #  ipAddress: 1.2.3.4
  #  annotations:
  #    service.beta.kubernetes.io/azure-load-balancer-internal: "true"

ingress:
  enabled: false
  annotations: {}
  #  kubernetes.io/ingress.class: nginx
  #  kubernetes.io/tls-acme: "true"
  #   hosts:
  #     - host: chart-example.local
  #       paths:
  #       - path: /
  #         backend:
  #           serviceName: chart-example.local
  #           servicePort: 80
  #   tls: []
  #      - secretName: chart-example-tls
  #        hosts:
  #          - chart-example.local

resources:
  limits:
    cpu: 1000m
    memory: 100Mi
  requests:
    cpu: 10m
    memory: 50Mi

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  enabled: true
  postgresqlUsername: opennsa
  # postgresqlPassword: ""
  postgresqlDatabase: opennsa
  image:
    tag: 9.6
  persistence:
    size: 1Gi
  resources:
    requests:
      memory: 500Mi
  volumePermissions:
    enabled: true
  initdbScripts:
    schema.sql: |
      CREATE TYPE label AS (
          label_type      text,
          label_value     text
      );
      CREATE TYPE parameter AS (
          label_type      text,
          label_value     text
      );
      CREATE TYPE security_attribute AS (
          attribute_type  text,
          atribute_value  text
      );
      CREATE TYPE directionality AS ENUM ('Bidirectional', 'Unidirectional');
      CREATE TABLE service_connections (
          id                      serial                      PRIMARY KEY,
          connection_id           text                        NOT NULL UNIQUE,
          revision                integer                     NOT NULL,
          global_reservation_id   text,
          description             text,
          requester_nsa           text                        NOT NULL,
          requester_url           text,
          reserve_time            timestamp                   NOT NULL,
          reservation_state       text                        NOT NULL,
          provision_state         text                        NOT NULL,
          lifecycle_state         text                        NOT NULL,
          source_network          text                        NOT NULL,
          source_port             text                        NOT NULL,
          source_label            label,
          dest_network            text                        NOT NULL,
          dest_port               text                        NOT NULL,
          dest_label              label,
          start_time              timestamp,                            -- null = immediate start
          end_time                timestamp,                            -- null = forever
          symmetrical             boolean                     NOT NULL,
          directionality          directionality              NOT NULL,
          bandwidth               integer                     NOT NULL, -- mbps
          parameter               parameter[],
          security_attributes     security_attribute[],
          connection_trace        text[],
          CHECK ( start_time < end_time)
      );
      CREATE TABLE sub_connections (
          id                      serial                      PRIMARY KEY,
          service_connection_id   integer                     NOT NULL REFERENCES service_connections(id),
          connection_id           text                        NOT NULL,
          provider_nsa            text                        NOT NULL,
          revision                integer                     NOT NULL,
          order_id                integer                     NOT NULL,
          reservation_state       text                        NOT NULL,
          provision_state         text                        NOT NULL,
          lifecycle_state         text                        NOT NULL,
          data_plane_active       boolean                     NOT NULL,
          data_plane_version      int,
          data_plane_consistent   boolean,
          source_network          text                        NOT NULL,
          source_port             text                        NOT NULL,
          source_label            label,
          dest_network            text                        NOT NULL,
          dest_port               text                        NOT NULL,
          dest_label              label,
          UNIQUE (provider_nsa, connection_id)
      );
      CREATE TABLE generic_backend_connections (
          id                      serial                      PRIMARY KEY,
          connection_id           text                        NOT NULL UNIQUE,
          revision                integer                     NOT NULL,
          global_reservation_id   text,
          description             text,
          requester_nsa           text                        NOT NULL,
          reserve_time            timestamp                   NOT NULL,
          reservation_state       text                        NOT NULL,
          provision_state         text                        NOT NULL,
          lifecycle_state         text                        NOT NULL,
          data_plane_active       boolean                     NOT NULL,
          source_network          text                        NOT NULL,
          source_port             text                        NOT NULL,
          source_label            label,
          dest_network            text                        NOT NULL,
          dest_port               text                        NOT NULL,
          dest_label              label,
          start_time              timestamp,                            -- null = immediate start
          end_time                timestamp,                            -- null = forever
          symmetrical             boolean                     NOT NULL,
          directionality          directionality              NOT NULL,
          bandwidth               integer                     NOT NULL, -- mbps
          parameter               parameter[],
          allocated               boolean                     NOT NULL, -- indicated if the resources are actually allocated
          CHECK ( start_time < end_time)
      );
      CREATE TABLE backend_connection_id (
          id                      integer                     PRIMARY KEY NOT NULL DEFAULT(1) CHECK (id = 1),
          connection_id           serial                      NOT NULL
      );

config:
  name: "config"
  mountPath: "/config"
  filesGlob: "config/*"

certificates:
  name: "certificates"
  mountPath: "/certificates"
  filesGlob: "certificates/*"

backends:
  enabled: true
  name: "backends"
  mountPath: "/backends"
  filesGlob: "backends/*"
