apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "nsi-opennsa.fullname" . }}
  labels:
    {{- include "nsi-opennsa.labels" . | nindent 4 }}
spec:
  serviceName: {{ .Chart.Name }}
  selector:
    matchLabels:
      {{- include "nsi-opennsa.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-config.yaml") . | sha256sum }}
        checksum/certificates: {{ include (print $.Template.BasePath "/configmap-certificates.yaml") . | sha256sum }}
      {{- if .Values.backends.enabled }}
        checksum/backends: {{ include (print $.Template.BasePath "/configmap-backends.yaml") . | sha256sum }}
      {{- end }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "nsi-opennsa.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "nsi-opennsa.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-postgres
          image: postgres:alpine
          {{- if .Values.secretProviderClass.enabled }}
          command:
            - "sh"
          args:
            - "-c"
            - 'until pg_isready; do echo `date` sleeping 2 seconds ...; sleep 2; done'
          {{- else }}
          command: ["sh", "-c",
            {{ printf "until pg_isready -h %s-postgresql.%s.svc.cluster.local -p 5432; do echo `date` sleeping 2 seconds ...; sleep 2; done" .Release.Name .Release.Namespace | quote }}
          ]
          {{- end }}
          {{- if .Values.secretProviderClass.enabled }}
          env:
            {{- range .Values.secretProviderClass.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "nsi-opennsa.fullname" . }}-secret
          volumeMounts:
            - name: secret-volume
              mountPath: "/mnt/secrets-store"
              readOnly: true
          {{- end }}
        {{- if .Values.secretProviderClass.enabled }}
        - name: initdb
          image: postgres:alpine
          command:
            - "sh"
          args:
            - "-c"
            - "sh /config/initdb.sh"
          env:
            {{- range .Values.secretProviderClass.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "nsi-opennsa.fullname" . }}-secret
          volumeMounts:
            - name: {{ .Release.Name }}-{{ .Values.config.name }}
              mountPath: {{ .Values.config.mountPath }}
              readOnly: true
            - name: secret-volume
              mountPath: "/mnt/secrets-store"
              readOnly: true
        {{- end }}
      env:
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.secretProviderClass.enabled }}
          command:
            - "sh"
          args:
            - "-c"
            - "sh /config/startup.sh"
          {{- else }}
          command:
            - "twistd"
          args:
            - "-ny"
            - {{ printf "%s/opennsa.tac" .Values.config.mountPath | quote }}
          {{- end }}
          {{- if .Values.secretProviderClass.enabled }}
          env:
          {{- range .Values.secretProviderClass.env }}
          - name: {{ .name }}
            value: {{ .value | quote }}
          {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "nsi-opennsa.fullname" . }}-secret
          {{- else }}
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secret
                  key: POSTGRES_PASSWORD
          {{- end }}
          ports:
            - name: internal
              containerPort: {{ .Values.service.containerPort }}
              protocol: TCP
          volumeMounts:
            - name: {{ .Release.Name }}-{{ .Values.config.name }}
              mountPath: {{ .Values.config.mountPath }}
              readOnly: true
            - name: {{ .Release.Name }}-{{ .Values.certificates.name }}
              mountPath: {{ .Values.certificates.mountPath }}
              readOnly: true
          {{- if .Values.backends.enabled }}
            - name: {{ .Release.Name }}-{{ .Values.backends.name }}
              mountPath: {{ .Values.backends.mountPath }}
              readOnly: true
          {{- end }}
          {{- if .Values.secretProviderClass.enabled }}
            - name: secret-volume
              mountPath: "/mnt/secrets-store"
              readOnly: true
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              scheme: {{ .Values.livenessProbe.scheme }}
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.service.containerPort }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              scheme: {{ .Values.startupProbe.scheme }}
              path: {{ .Values.startupProbe.path }}
              port: {{ .Values.service.containerPort }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: {{ .Release.Name }}-{{ .Values.config.name }}
          configMap:
            name: {{ include "nsi-opennsa.fullname" . }}-{{ .Values.config.name }}
        - name: {{ .Release.Name }}-{{ .Values.certificates.name }}
          configMap:
            name: {{ include "nsi-opennsa.fullname" . }}-{{ .Values.certificates.name }}
        {{- if .Values.backends.enabled }}
        - name: {{ .Release.Name }}-{{ .Values.backends.name }}
          configMap:
            name: {{ include "nsi-opennsa.fullname" . }}-{{ .Values.backends.name }}
        {{- end }}
        {{- if .Values.secretProviderClass.enabled }}
        - name: secret-volume
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ include "nsi-opennsa.fullname" . }}-secretproviderclass
            nodePublishSecretRef:
              name: {{ .Values.secretProviderClass.nodePublishSecretRefNname }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
